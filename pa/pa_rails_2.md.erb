---
title: PA Rails 2
---
:h2 Continuation

(click here to go back to <%= link_to_topic :pa_rails_1 %>)
Continuing from PA Rails 1 we will now allow the user to request to sign up for the course (fake of course :) There will be a new Search page which will help the user to find courses to sign up to, and then an enroll button to further allow them to sign up to it.

:h3 Purpose

This assignment series is designed to have each student practice some important skills, including:

  1. Structuring a web based application using Rails
  1. Implementing such an application using Ruby
  1. Designing a relational database schema including a many to many relationship

You will also gain important specific knowledge

  1. You will learn more and more shell commands
  1. You will learn how to do a drop down menu in HTML
I believe you will find that these skills amount to general `full stack programming` skills which you will need as a software engineer either in academia or in the business world/

:h2 Part 2: Course Enrollment, Search

1. Create a User model with user accounts.
1. Update your app to incorporate user authentication using any of the techniques we covered in class or that you discover on your own.
1. When the user is not logged in, the home page (i.e. the root or `/` page) displays only a page title plus a login and a register link or button, nothing more.
1. When the user is logged in, the home page (and every other page) should display the data for each tab (like before) *and* a logout link or button.
1. For Registration, all that is required is a simple password plus username and/or email. Validation, repeat password, etc. are not required.
1. Add a model/table called Enrollment linking users and courses (a many-to-many association).
1. Add a fourth page to your app called Search. In the search page have a search form allowing users to search for courses. The search page should have a text box for the course name and a dropdown (or select box) for the subjects. Remember that forms have two controller actions: one to display the search form and one to actually perform the search. Remember to use `local: true` in the parameters of your form, otherwise it might not work properly.
1. There are several ways to approach the dropdown menu (also known as a `select box`). Look at the `subject` data. Each subject has a name (e.g. "Computer Science") and an id (e.g. "1161-1400"). You need to write a simple algorithm which creates a data-structure which maps the id to the subject. Look at section 3.2 of [Form Helpers Rails Guide](https://guides.rubyonrails.org/form_helpers.html) for one common way to do it. As you can see, the data-structure you want to build looks like: `[['Computer Science',  "1161-1400"], ["East Asian Studies","1161-1500"], [... etc]]`. When the user picks out a subject the "id" would be returned to the controller.
1. You might end up with code in the do_search controller action that looks like this:

<%= source_begin "language-ruby" %>
if params[:subject].blank?
  @courses = Course.where("name LIKE ?", "%#{params[:search_text]}%")
else
  @courses = Subject.find(params[:subject]).courses.where("name LIKE ?",
                          "%#{params[:search_text]}%")
end
<%= source_end %>

1. Each of your search results should have a button called “Enroll” which when clicked will enroll a user in that course.
1. Modify the Home page to list all the courses that a user is enrolled in
1. Continue using Bootstrap. Implement a simple [Bootstrap 4 Grid](https://getbootstrap.com/docs/4.0/layout/grid/). And use bootstrap classes for at least one or two of your other elements. Buttons, tabs, columns are all possibilities.

:h2 Deliverables:

:h3 Caveats

1. Make sure your code is as nice as you can get it and that your repo is clear.
1. Make sure to include a readme.md file to explain whatever you would like to explain.
1. You must be using ruby 2.7.2
1. We will not attempt to run your program ourselves (too many confuguration nuances). Instead we rely on your heroku link to WORK!
1. If your Heroku link doesn't work then we wont be able to see your app and there will be points off!

### Specific Deliverables

1. Submit to Latte your link to Heroku.
1. Submit to Latte a zipped up folder of your complete app.

## Useful links

* [Simple Authentication Guide with Ruby on Rails - Minor typo, replace sessions with session in one case](https://levelup.gitconnected.com/simple-authentication-guide-with-ruby-on-rails-16a6255f0be8)
* [Implementing authentication with Auth0 and Rails 6](https://emmanuelhayford.com/implementing-authentication-with-auth0-and-rails-6/)
* [Form Helpers Rails Guide](https://guides.rubyonrails.org/form_helpers.html)
* [Google authentication in Ruby on Rails](https://developers.google.com/gdata/articles/gdata_on_rails)
* [OmniAuth Google OAuth2 Strategy](https://github.com/zquestz/omniauth-google-oauth2)
* [Action View Form Helpers Guide](https://guides.rubyonrails.org/form_helpers.html)
* [How to get google client ID and client Secret](https://www.balbooa.com/gridbox-documentation/how-to-get-google-client-id-and-client-secret)
* [OmniAuth Sinatra Example](https://github.com/omniauth/omniauth/wiki/Sinatra-Example)
