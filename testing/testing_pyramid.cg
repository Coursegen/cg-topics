---
title: What to test
slides: true
---
:h3 What to Test

* Testing is not free!
    1. Code to write
    1. Tests to run
    
* As the software (inevitably) evolves
    1. interfaces change
    1. The code changes in two places: implementation and test
    1. Sometimes more: test fixtures, database schemas
    1. Conclusion:
    1. More is not necessarily better

:slide_title Testing Pyramid

* From (fewest -> most) tests and brittleness
    1. User Interface tests
    1. ...
    1. Integration tests
    1. ...
    1. Unit Tests

:slide_title What not to test

* Try not to test the same thing in more than one place
* Try not to test a library which is itself well tests
* Try not to test something that is self-evidently trivial (eye of the beholder)

:slide_title What to test

* Try to test code which is prone to off-by-one errors
* Try to test code with intricate algorithms
* Try to test to verify assumption

:slide_title Natural 'borders' in the architecture

* If I check your passport (i.e. validate inputs) at the border
* Then it makes no sense to check it every time you enter a building
* As long as there are no unguarded borders :)

:slide_title About Brittle Tests

* When a change in design suddenly makes a large number of tests fail
* Sign that either your design or your test approach can be improved
