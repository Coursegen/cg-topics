---
title: "PA: Out and back using Odometry"
desc: "Robot drives out and returns by using odometry"
---
## Introduction

* This assignment will teach you how to write a ROS node that subscribes and publishes to topics
* You will learn how to use odometry for more precise movement

### Purpose

* Learn about localization in ROS
* Use odometry data for more precise movement
* Learn how to subscribe to ROS topics 

### Expected preparation

* Have a solid understanding of 3d coordinate systems
* Have a better understanding of how Python callbacks work in the context of ROS subscribers

### What I hope you will learn

* Use odometry data for more precise movement
* Learn how to subscribe to ROS topics

### References and resources

* Use the PRRExamples library!
* Launch gazebo simulation <https://emanual.robotis.com/docs/en/platform/turtlebot3/simulation/>
* Python ROS node reference <http://wiki.ros.org/ROS/Tutorials/WritingPublisherSubscriber%28python%29>
* Subscribe to the odometry topic <https://answers.ros.org/question/10697/how-to-subscribe-to-odom-properly-in-python/>

### Topics Used

* cmd_vel [Twist](http://docs.ros.org/melodic/api/geometry_msgs/html/msg/Twist.html)
* odom [Odom](http://docs.ros.org/melodic/api/nav_msgs/html/msg/Odometry.html)

## Assignment

* Same goal as PA1 but use odometry instead of timing to return to original pose


### Deliverables

* Commented Python source code file named "FirstnameLastname_PA#"
* Video of your program running in gazebo or your lab at home 
* Both submitted in Latte

### Steps

* Import Odometry from nav_msgs.msg

~~~~{.python}
import rospy
from nav_msgs.msg import Odometry
~~~~

* Subscribe to odometry topic `odom` and create a callback function to use as an arg:

~~~~{.python}
example_sub = rospy.Subscriber('odometry', Odometry, <name of callback function>)`
~~~~

* Write a callback for the odometry topic and add a control loop
* After starting a gazebo simulation and publishing some `cmd_vel`'s print out `odometry.pose` and `odometry.twist` so you can see what odometry data looks like
* Write code in odometry callback and control loop to have the robot navigate 1.5 meters away from it's origin and then return to as close to it's origin pose as possible using odometry information.

### Hints
* You can either modify existing code from the prrexamples repo or write your own python ROS node
* The instructions will give you the pieces of code to get you started but the rest will be up to you
* Getting familiar with ROS documentation is a good idea
